package org.example.travelexpertsphase3desktop.model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import org.example.travelexpertsphase3desktop.Utils.DbConfig;

import java.sql.*;

public class AgentManagerDB {

    //method to get db connection
    public static Connection getConnection() {
//        String url = "jdbc:mysql://localhost:3306/travelexperts";
//       String user = "root";
//       String password = "@Datetime123";

        String url = DbConfig.getProperty("url");
        String user = DbConfig.getProperty("user");
        String password = DbConfig.getProperty("password");

        Connection conn;
        try {
            conn = DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            throw new RuntimeException("could not connect to database");
        }
        return conn;
    }

    // get agent managers
    public static ObservableList<AgentManager> getAgentManagers() throws SQLException {
        ObservableList<AgentManager> agentmanagers = FXCollections.observableArrayList();
        AgentManager agentmanager;
        // create connection using static method
        Connection conn = getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("select * from agentmanagers");
        while (rs.next()) {//iterate each row of result from db
            agentmanager = new AgentManager(
                    rs.getInt(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6),
                    rs.getString(7)



            );
            agentmanagers.add(agentmanager); //add created gents to list
        }
        return agentmanagers;  // return observable list of agent managers.
    }

    //insert agent manager

    public static int addAgentManager (AgentManager agentmanager) throws SQLException {
        Connection conn = getConnection();
        int numAffectedRows = 0;
        //columns name specified because ManagerId will be autogenerated from db
        String sql = "insert into agentmanagers (FirstName," +
                " LastName, " +
                " Email, " +
                " Phone, " +
                " Password, " +
                "Role ) values(?,?,?,?,?,?)";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, agentmanager.getFirstName());
                stmt.setString(2, agentmanager.getLastName());
                stmt.setString(3, agentmanager.getEmail());
                stmt.setString(4, agentmanager.getPhone());
                stmt.setString(5, agentmanager.getPassword());
                stmt.setString(6, agentmanager.getRole());

                //run query
        numAffectedRows = stmt.executeUpdate();
        return numAffectedRows;
    }

    //edit agentmanager
    public static int updateAgentManager (int managerId, AgentManager agentmanager)
            throws SQLException {
        Connection conn = getConnection();
        int numAffectedRows = 0;
//columns names specified because ManagerId will be auto-generated from db

        String sql = "UPDATE agentmanagers " +
                "SET FirstName = ?, " +
                "LastName = ?, " +
                "Email = ?, " +
                "Phone = ?, " +
                "Password = ?, " +
                "Role = ? " +
                "WHERE ManagerId = ?";

        PreparedStatement stmt = conn.prepareStatement(sql);

        stmt.setString(1, agentmanager.getFirstName());
        stmt.setString(2, agentmanager.getLastName());
        stmt.setString(3, agentmanager.getEmail());
        stmt.setString(4, agentmanager.getPhone());
        stmt.setString(5, agentmanager.getPassword());
        stmt.setString(6, agentmanager.getRole());
        stmt.setInt(7, agentmanager.getManagerId());

        //run query
        numAffectedRows = stmt.executeUpdate();
        conn.close();
        return numAffectedRows;
    }

    //delete

    public static int deleteAgentManager (int managerId) throws SQLException {
        int numAffectedRows = 0;
        Connection conn = getConnection();
        String sql = "delete from agentmanagers where ManagerID =?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setInt(1, managerId);
        numAffectedRows = stmt.executeUpdate();
        conn.close();
        return numAffectedRows;
    }

    }
