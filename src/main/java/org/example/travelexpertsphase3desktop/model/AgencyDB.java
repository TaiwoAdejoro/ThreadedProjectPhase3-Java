package org.example.travelexpertsphase3desktop.model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import org.example.travelexpertsphase3desktop.Utils.DbConfig;

import java.sql.*;

public class AgencyDB {
    //method to get db connection
    public static Connection getConnection() {
//        String url = "jdbc:mysql://localhost:3306/travelexperts";
//       String user = "root";
//       String password = "@Datetime123";

        String url = DbConfig.getProperty("url");
        String user = DbConfig.getProperty("user");
        String password = DbConfig.getProperty("password");

        Connection conn;
        try {
            conn = DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            throw new RuntimeException("could not connect to database");
        }
        return conn;
    }

    // get agents
    public static ObservableList<Agency> getAgencies() throws SQLException {
        ObservableList<Agency> agencies = FXCollections.observableArrayList();
        Agency agency;
        // create connection using static method
        Connection conn = getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("select * from agencies");
        while (rs.next()) {//iterate each row of result from db
            agency = new Agency(
                    rs.getInt(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6),
                    rs.getString(7),
                    rs.getString(8)
            );
            agencies.add(agency); //add created gents to list
        }
        return agencies;  // return observable list of agents.
    }

    public static int addAgency(Agency agency) throws SQLException {
        Connection conn = getConnection();
        int numAffectedRows = 0;
        //columns name specified because AgtId will be autogenerated from db
        String sql = "insert into agencies (AgncyAddress," +
                " AgncyCity," +
                " AgncyProv, " +
                "AgncyPostal," +
                " AgncyCountry," +
                " AgncyPhone, " +
                "AgncyFax) values(?,?,?,?,?,?,?)";
        PreparedStatement stmt = conn.prepareStatement(sql);

        stmt.setString(1, agency.getAgencyAddress());
        stmt.setString(2, agency.getAgencyCity());
        stmt.setString(3, agency.getAgencyProvince());
        stmt.setString(4, agency.getAgencyPostal());
        stmt.setString(5, agency.getAgencyCountry());
        stmt.setString(6, agency.getAgencyPhone());
        stmt.setString(7, agency.getAgencyFax());

        //run query
        numAffectedRows= stmt.executeUpdate();
        return numAffectedRows;
    }

    //update Agency
    public static int updateAgency(int agencyId, Agency agency) throws SQLException {
        Connection conn = getConnection();
        int numAffectedRows = 0;
        //columns name specified because AgtId will be autogenerated from db
        String sql = "Update agencies " +
                "SET AgncyAddress = ?, " +
                "AgncyCity = ?, " +
                "AgncyProv = ?, AgncyPostal = ?, AgncyCountry = ?, " +
                "AgncyPhone = ?, AgncyFax = ? " +
                "Where AgencyId = ?";
        PreparedStatement stmt = conn.prepareStatement(sql);

        stmt.setString(1, agency.getAgencyAddress());
        stmt.setString(2, agency.getAgencyCity());
        stmt.setString(3, agency.getAgencyProvince());
        stmt.setString(4, agency.getAgencyPostal());
        stmt.setString(5, agency.getAgencyCountry());
        stmt.setString(6, agency.getAgencyPhone());
        stmt.setString(7, agency.getAgencyFax());
        stmt.setInt(8, agencyId);

        //run query
        numAffectedRows= stmt.executeUpdate();
        conn.close();
        return numAffectedRows;
    }

    //delete
    public static int deleteAgency(int agencyId) throws SQLException {
        int numAffectedRows = 0;
        Connection conn = getConnection();
        String sql = "delete from agencies where AgencyId = ?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setInt(1, agencyId);
        numAffectedRows = stmt.executeUpdate();
        conn.close();
        return numAffectedRows;

    }

}
