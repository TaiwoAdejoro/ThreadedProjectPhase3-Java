package org.example.travelexpertsphase3desktop.model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import org.example.travelexpertsphase3desktop.Utils.DbConfig;

import java.sql.*;

public class AgentDB {
    //method to get db connection
    public static Connection getConnection() {
//        String url = "jdbc:mysql://localhost:3306/travelexperts";
//       String user = "root";
//       String password = "@Datetime123";

        String url = DbConfig.getProperty("url");
        String user = DbConfig.getProperty("user");
        String password = DbConfig.getProperty("password");

        Connection conn;
        try {
            conn = DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            throw new RuntimeException("could not connect to database");
        }
        return conn;
    }

    // get agents
    public static ObservableList<Agent> getAgents() throws SQLException {
        ObservableList<Agent> agents = FXCollections.observableArrayList();
        Agent agent;
        // create connection using static method
        Connection conn = getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("select * from agents");
        while (rs.next()) {//iterate each row of result from db
            agent = new Agent(
                    rs.getInt(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6),
                    rs.getString(7),
                    rs.getInt(8)
            );
            agents.add(agent); //add created gents to list
        }
        return agents;  // return observable list of agents.
    }

    //insert agent
    public static int addAgent (Agent agent) throws SQLException {
        Connection conn = getConnection();
        int numAffectedRows = 0;
        //columns name specified because AgtId will be autogenerated from db
        String sql = "insert into agents (AgtFirstName," +
                " AgtMiddleInitial," +
                " AgtLastName, " +
                "AgtBusPhone," +
                " AgtEmail, " +
                "AgtPosition, " +
                "AgencyId ) values(?,?,?,?,?,?,?)";
                PreparedStatement stmt = conn.prepareStatement(sql);

                stmt.setString(1, agent.getFirstname());
                stmt.setString(2, agent.getMiddleInitial());
                stmt.setString(3, agent.getLastname());
                stmt.setString(4, agent.getBusPhone());
                stmt.setString(5, agent.getEmail());
                stmt.setString(6, agent.getPosition());
                stmt.setInt(7, agent.getAgencyId());

                //run query
                numAffectedRows= stmt.executeUpdate();
                return numAffectedRows;

    }

    //edit agent
    public static int updateAgent(int agentId, Agent agent) throws SQLException {
        Connection conn = getConnection();
        int numAffectedRows = 0;
        //columns names specified because AgtId will be auto-generated from db
        String sql = "Update agents " +
                "SET AgtFirstName = ?, " +
                "AgtMiddleInitial = ?, " +
                "AgtLastName = ?, AgtBusPhone = ?, AgtEmail = ?, " +
                "AgtPosition = ?, AgencyId = ? " +
                "Where AgentId = ?";
        PreparedStatement stmt = conn.prepareStatement(sql);

        stmt.setString(1,agent.getFirstname());
        stmt.setString(2,agent.getMiddleInitial());
        stmt.setString(3,agent.getLastname());
        stmt.setString(4,agent.getBusPhone());
        stmt.setString(5,agent.getEmail());
        stmt.setString(6,agent.getPosition());
        stmt.setInt(7,agent.getAgencyId());
        stmt.setInt(8,agentId) ;

        //run query
        numAffectedRows= stmt.executeUpdate();
        conn.close();
        return numAffectedRows;
    }

    //delete
    public static int deleteAgent(int agentId) throws SQLException {
        int numAffectedRows = 0;
        Connection conn = getConnection();
        String sql = "delete from agents where AgentId = ?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setInt(1, agentId);
        numAffectedRows = stmt.executeUpdate();
        conn.close();
        return numAffectedRows;
    }

    //  Check if Agency ID exists in the database (AgentDB class)
    //  Use existing getConnection() method
    public static boolean isAgencyIdExists(int agencyId) {
        String query = "SELECT AgencyId FROM agencies WHERE AgencyId = ?";

        try (Connection conn = getConnection();  //  Use AgentDB.getConnection()
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setInt(1, agencyId);
            ResultSet rs = stmt.executeQuery();

            return rs.next(); // Returns true if agencyId exists
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}
